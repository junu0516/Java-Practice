/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.60
 * Generated at: 2021-01-28 00:15:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t*{box-sizing:board-box;}\r\n");
      out.write("\t.video-film {box-shadow: rgba(0, 7, 15, 0.7) 0 0 0 9999px; z-index: 100;}\r\n");
      out.write("\t.video-background {\r\n");
      out.write("\t\tbackground: #000; position: fixed;\r\n");
      out.write("\t\ttop: 0; right: 0; bottom: 0; left: 0; z-index: -99;\r\n");
      out.write("\t}\r\n");
      out.write("\t.video-foreground, .video-background iframe {\r\n");
      out.write("\t\tposition: absolute; top: 0; left: 0;\r\n");
      out.write("\t\twidth: 100%; height: 100%; pointer-events: none;\r\n");
      out.write("\t}\r\n");
      out.write("\t@media ( min-aspect-ratio : 16/9) {\r\n");
      out.write("\t\t.video-foreground {height: 300%; top: -100%;}\r\n");
      out.write("\t}\r\n");
      out.write("\t@media ( max-aspect-ratio : 16/9) {\r\n");
      out.write("\t\t.video-foreground {width: 300%; left: -100%;}\r\n");
      out.write("\t}\r\n");
      out.write("\th1 {color: white;}\r\n");
      out.write("\t#visual-btn {\r\n");
      out.write("\t\tz-index: 50; color: #fff; font-size: 20px; border: 2px solid #fff;\r\n");
      out.write("\t\tpadding: 12px 24px; border-radius: 5px; cursor: pointer; background-color: rgba(0, 0, 0, 0);\r\n");
      out.write("\t}\r\n");
      out.write("\t#visual-btn:hover {\r\n");
      out.write("\t\tcolor: #ff6868; font-size: 20px; border: 2px solid #ff6868;\r\n");
      out.write("\t\tpadding: 12px 24px; border-radius: 5px; cursor: pointer;\r\n");
      out.write("\t}\r\n");
      out.write("\t#indexBtn {position: fixed; text-align: center}\r\n");
      out.write("\t.center {position: absolute; top: 60%; left: 47%; margin: -50px 0 0 -50px;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<p class=\"type_text\" style=\"text-align:center; color:#d5d4f7; font-size:18pt\"></p>\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"indexBtn\" class=\"center\">\r\n");
      out.write("\t\t<button id=\"visual-btn\" onclick=\"javascript:location.href='main.do';\">Visit our Site!</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"video-background\">\r\n");
      out.write("\t\t<div class=\"video-foreground\">\r\n");
      out.write("\t\t\t<div id=\"muteYouTubeVideoPlayer\"></div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"video-film\"></div>\r\n");
      out.write(" \r\n");
      out.write("\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("\t<script async src=\"https://www.youtube.com/iframe_api\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tvar player;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction onYouTubePlayerAPIReady(){\r\n");
      out.write("\t\t\tplayer = new YT.Player('muteYouTubeVideoPlayer', {\r\n");
      out.write("\t\t\t\tvideoId : 'rhSTqesuXVo',\r\n");
      out.write("\t\t\t\tplayerVars : {\r\n");
      out.write("\t\t\t\t\tautoplay : 1, \t\t// Auto-play the video on load // 자동 재생 (유)\r\n");
      out.write("\t\t\t\t\tcontrols : 0, \t\t// Show pause/play buttons in player // 컨트롤러의 유무 (무)\r\n");
      out.write("\t\t\t\t\trel : 0,\t\t\t// 해당 영상이 종료된 후 관련 동영상 표시할지\r\n");
      out.write("\t\t\t\t\tstart : 105,\r\n");
      out.write("\t\t\t\t\tend : 301,\r\n");
      out.write("\t\t\t\t\tshowinfo : 0, \t\t// Hide the video title // 재생 영상에 대한 정보 유무\r\n");
      out.write("\t\t\t\t\tmodestbranding : 1, // Hide the Youtube Logo\r\n");
      out.write("\t\t\t\t\tloop : 1, \t\t\t// Run the video in a loop // 반복 재생에 대한 여부\r\n");
      out.write("\t\t\t\t\tplaylist : 'rhSTqesuXVo',\r\n");
      out.write("\t\t\t\t\tfs : 0, \t\t\t// Hide the full screen button\r\n");
      out.write("\t\t\t\t\tcc_load_policy : 0, // Hide closed captions\r\n");
      out.write("\t\t\t\t\tiv_load_policy : 3, // Hide the Video Annotations\r\n");
      out.write("\t\t\t\t\tautohide : 1\t\t// Hide video controls when playing\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tevents:{\r\n");
      out.write("\t\t\t\t\tonReady:function(e){\r\n");
      out.write("\t\t\t\t\t\te.target.mute();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\t\r\n");
      out.write("\t");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
